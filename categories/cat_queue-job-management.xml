<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DFT blog (queue, job management)</title><link>http://kitchingroup.cheme.cmu.edu/dft-book/</link><description></description><atom:link href="http://kitchingroup.cheme.cmu.edu/dft-book/categories/cat_queue-job-management.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Thu, 26 May 2016 19:34:25 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Managing queued jobs with vasp.py</title><link>http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/</link><dc:creator>John Kitchin</dc:creator><description>&lt;p&gt;
One of the reasons we use vasp.py is to make it easy to run a lot of calculations conveniently. vasp.py automatically submits jobs to the queue for us, and provides some job control features to make it wait until they are finished.
&lt;/p&gt;

&lt;p&gt;
Sometimes things go wrong though, e.g. you realize you used the wrong parameter and suddenly you have a lot of jobs in the queue to stop. Not to worry, vasp.py can help you out. Each calculator stores a jobid on it, and vasp.py provides some support to interact with the queue system (assuming you use Torque or something compatible with it)!
&lt;/p&gt;

&lt;p&gt;
Here is an example where we setup and run 10 calculations. The first time we run this, 10 jobs get submitted.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; vasp &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; Vasp
&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; ase &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; Atom, Atoms
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; plt
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np

&lt;span style="color: #BA36A5;"&gt;bond_lengths&lt;/span&gt; = np.linspace(1.05, 1.3, 10)

&lt;span style="color: #BA36A5;"&gt;calcs&lt;/span&gt; = [Vasp(&lt;span style="color: #008000;"&gt;'molecules/co-n{0:02d}'&lt;/span&gt;.&lt;span style="color: #006FE0;"&gt;format&lt;/span&gt;(i),  &lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;output dir&lt;/span&gt;
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   xc=&lt;span style="color: #008000;"&gt;'PBE'&lt;/span&gt;,
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   nbands=6,
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   encut=520,
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   ismear=1,
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   sigma=0.2,
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   atoms=Atoms([Atom(&lt;span style="color: #008000;"&gt;'C'&lt;/span&gt;, [0, 0, 0]),
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;Atom(&lt;span style="color: #008000;"&gt;'O'&lt;/span&gt;, [d, 0, 0])],
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   cell=(6, 6, 6)))
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; i, d &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;enumerate&lt;/span&gt;(bond_lengths)]

&lt;span style="color: #BA36A5;"&gt;energies&lt;/span&gt; = [calc.potential_energy &lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; calc &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; calcs]

&lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;Here are the jobids&lt;/span&gt;
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;([(c.jobid(), c.in_queue()) &lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; c &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; calcs])

&lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;Stop here until all calculations are done.&lt;/span&gt;
Vasp.stop_if(&lt;span style="color: #D0372D;"&gt;None&lt;/span&gt; &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; energies)

&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(energies)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
/home-research/jkitchin/dft-book/blog/source/org/molecules/co-n00 submitted: 1397279.gilgamesh.cheme.cmu.edu
/home-research/jkitchin/dft-book/blog/source/org/molecules/co-n01 submitted: 1397280.gilgamesh.cheme.cmu.edu
/home-research/jkitchin/dft-book/blog/source/org/molecules/co-n02 submitted: 1397281.gilgamesh.cheme.cmu.edu
/home-research/jkitchin/dft-book/blog/source/org/molecules/co-n03 submitted: 1397282.gilgamesh.cheme.cmu.edu
/home-research/jkitchin/dft-book/blog/source/org/molecules/co-n04 submitted: 1397283.gilgamesh.cheme.cmu.edu
/home-research/jkitchin/dft-book/blog/source/org/molecules/co-n05 submitted: 1397284.gilgamesh.cheme.cmu.edu
/home-research/jkitchin/dft-book/blog/source/org/molecules/co-n06 submitted: 1397285.gilgamesh.cheme.cmu.edu
/home-research/jkitchin/dft-book/blog/source/org/molecules/co-n07 submitted: 1397286.gilgamesh.cheme.cmu.edu
/home-research/jkitchin/dft-book/blog/source/org/molecules/co-n08 submitted: 1397287.gilgamesh.cheme.cmu.edu
/home-research/jkitchin/dft-book/blog/source/org/molecules/co-n09 submitted: 1397288.gilgamesh.cheme.cmu.edu
[(u'1397279.gilgamesh.cheme.cmu.edu', True), (u'1397280.gilgamesh.cheme.cmu.edu', True), (u'1397281.gilgamesh.cheme.cmu.edu', True), (u'1397282.gilgamesh.cheme.cmu.edu', True), (u'1397283.gilgamesh.cheme.cmu.edu', True), (u'1397284.gilgamesh.cheme.cmu.edu', True), (u'1397285.gilgamesh.cheme.cmu.edu', True), (u'1397286.gilgamesh.cheme.cmu.edu', True), (u'1397287.gilgamesh.cheme.cmu.edu', True), (u'1397288.gilgamesh.cheme.cmu.edu', True)]
&lt;/pre&gt;

&lt;p&gt;
Say we just realize we wanted to delete these jobs, and change a parameter. We just get the calculators, and call qdel on each one like this:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; vasp &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; Vasp
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np

&lt;span style="color: #BA36A5;"&gt;bond_lengths&lt;/span&gt; = np.linspace(1.05, 1.3, 10)
&lt;span style="color: #BA36A5;"&gt;calcs&lt;/span&gt; = [Vasp(&lt;span style="color: #008000;"&gt;'molecules/co-n{0:02d}'&lt;/span&gt;.&lt;span style="color: #006FE0;"&gt;format&lt;/span&gt;(i))
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; i, d &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;enumerate&lt;/span&gt;(bond_lengths)]

&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;([calc.qdel() &lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; calc &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; calcs])
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
[(0, ''), (0, ''), (0, ''), (0, ''), (0, ''), (0, ''), (0, ''), (0, ''), (0, ''), (0, '')]
&lt;/pre&gt;

&lt;p&gt;
All those 0's just means the job deletion succeeded. Now, we just have to adjust the original parameter set, and rerun the original script! That will resubmit the new jobs for us.
&lt;/p&gt;

&lt;p&gt;
Here is the output from one of those calculations. Note the path is an org-link, so you can just click on it to open the directory if you run this in Emacs.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; vasp &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; Vasp
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(Vasp(&lt;span style="color: #008000;"&gt;'molecules/co-n00'&lt;/span&gt;))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
*************** VASP CALCULATION SUMMARY ***************
Vasp calculation directory:
---------------------------
  [[/home-research/jkitchin/dft-book/blog/source/org/molecules/co-n00]]

Unit cell:
----------
       x       y       z             |v|
  v0   6.000   0.000   0.000       6.000 Ang
  v1   0.000   6.000   0.000       6.000 Ang
  v2   0.000   0.000   6.000       6.000 Ang
  a,b,c,alpha,beta,gamma (deg): 6.000 6.000 6.000 90.0 90.0 90.0
  Total volume:                  216.000 Ang^3
  Stress:    xx     yy     zz     yz     xz     xy
         -0.071  0.001  0.001 -0.000 -0.000 -0.000 GPa

  ID  tag     sym    x        y        z    rmsF (eV/A)constraints (F=Frozen)
  0   0       C      0.000    0.000    0.000   14.97      T T T
  1   0       O      1.050    0.000    0.000   14.97      T T T
  Potential energy: -14.1779 eV

INPUT Parameters:
-----------------
  lcharg    : False
  pp        : PBE
  nbands    : 6
  xc        : pbe
  ismear    : 1
  lwave     : False
  sigma     : 0.2
  kpts      : [1, 1, 1]
  encut     : 520

Pseudopotentials used:
----------------------
  C: potpaw_PBE/C/POTCAR (git-hash: ee4d8576584f8e9f32e90853a0cbf9d4a9297330)
  O: potpaw_PBE/O/POTCAR (git-hash: 592f34096943a6f30db8749d13efca516d75ec55)
&lt;/pre&gt;

&lt;p&gt;
Here is a summary of the job control functions and queue commands built in to vasp.py.
&lt;/p&gt;
&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; vasp.py job control functions&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-1-1" class="outline-3"&gt;
&lt;h3 id="sec-1-1"&gt;&lt;span class="section-number-3"&gt;1.1&lt;/span&gt; Vasp.run()&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-1"&gt;
&lt;p&gt;
Runs all stored calculators on the Vasp class.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; vasp &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; Vasp
&lt;span style="color: #006FE0;"&gt;help&lt;/span&gt;(Vasp.run)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
Help on method run in module vasp.vasp_core:

run(cls, wait=False) method of __builtin__.type instance
    Convenience function to run calculators.

    The default behavior is to exit after doing this. If wait is
    True, iy will cause it to wait with the default args to
    Vasp.wait.

    If wait is a dictionary, it will be passed as kwargs to
    Vasp.wait.
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-2" class="outline-3"&gt;
&lt;h3 id="sec-1-2"&gt;&lt;span class="section-number-3"&gt;1.2&lt;/span&gt; calc.run()&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-2"&gt;
&lt;p&gt;
Runs the instance calculator.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-3" class="outline-3"&gt;
&lt;h3 id="sec-1-3"&gt;&lt;span class="section-number-3"&gt;1.3&lt;/span&gt; Vasp.all()&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-3"&gt;
&lt;p&gt;
Returns whether all calculators are ready, e.g. with results.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; vasp &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; Vasp
&lt;span style="color: #006FE0;"&gt;help&lt;/span&gt;(Vasp.&lt;span style="color: #006FE0;"&gt;all&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
Help on method all in module vasp.vasp_core:

all(cls) method of __builtin__.type instance
    Returns if all calculators in the class are ready.
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-4" class="outline-3"&gt;
&lt;h3 id="sec-1-4"&gt;&lt;span class="section-number-3"&gt;1.4&lt;/span&gt; Vasp.stop_if(condition)&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-4"&gt;
&lt;p&gt;
Aborts the script if condition is not truthy
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; vasp &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; Vasp
&lt;span style="color: #006FE0;"&gt;help&lt;/span&gt;(Vasp.stop_if)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
Help on method stop_if in module vasp.vasp_core:

stop_if(cls, condition) method of __builtin__.type instance
    Stops the program if condition is truthy.
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-5" class="outline-3"&gt;
&lt;h3 id="sec-1-5"&gt;&lt;span class="section-number-3"&gt;1.5&lt;/span&gt; Vasp.abort() and calc.abort()&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-5"&gt;
&lt;p&gt;
Aborts the script.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; vasp &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; Vasp
&lt;span style="color: #006FE0;"&gt;help&lt;/span&gt;(Vasp.abort)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
Help on method abort in module vasp.vasp_core:

abort(cls) method of __builtin__.type instance
    Abort and exit the program the calculator is running in.
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-1-6" class="outline-3"&gt;
&lt;h3 id="sec-1-6"&gt;&lt;span class="section-number-3"&gt;1.6&lt;/span&gt; Vasp.wait() and calc.wait()&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-1-6"&gt;
&lt;p&gt;
Allows a real time-elapsed wait for jobs to finish. This blocks the script.
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; vasp &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; Vasp
&lt;span style="color: #006FE0;"&gt;help&lt;/span&gt;(Vasp.wait)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
Help on method wait in module vasp.vasp_core:

wait(cls, poll_interval=5, timeout=None, abort=False) method of __builtin__.type instance
    Control function to wait until all calculators are ready.

    if abort is truthy, stop the program.

    Otherwise check the calculators every poll_interval seconds,
    up to timeout seconds later. If timeout is None, poll forever.
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; vasp.py queue commands&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-2-1" class="outline-3"&gt;
&lt;h3 id="sec-2-1"&gt;&lt;span class="section-number-3"&gt;2.1&lt;/span&gt; calc.qstat(*options)&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;p&gt;
Gets information about the job.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; vasp &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; Vasp
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np

&lt;span style="color: #BA36A5;"&gt;calc&lt;/span&gt; = Vasp(&lt;span style="color: #008000;"&gt;'molecules/co-n09'&lt;/span&gt;)

calc.qstat()
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
Job id                    Name             User            Time Use S Queue
------------------------- ---------------- --------------- -------- - -----
1397268.gilgamesh         .../co-n09       jkitchin               0 R short
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-2" class="outline-3"&gt;
&lt;h3 id="sec-2-2"&gt;&lt;span class="section-number-3"&gt;2.2&lt;/span&gt; calc.qalter(*options)&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-2"&gt;
&lt;p&gt;
Allows you to alter the queue parameters for a job.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; vasp &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; Vasp
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np

&lt;span style="color: #BA36A5;"&gt;calc&lt;/span&gt; = Vasp(&lt;span style="color: #008000;"&gt;'molecules/co-n09'&lt;/span&gt;)

calc.qalter(&lt;span style="color: #008000;"&gt;'-l'&lt;/span&gt;, &lt;span style="color: #008000;"&gt;'walltime=20:00:00'&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-3" class="outline-3"&gt;
&lt;h3 id="sec-2-3"&gt;&lt;span class="section-number-3"&gt;2.3&lt;/span&gt; calc.qdel(*options)&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-3"&gt;
&lt;p&gt;
Allows you to delete the job
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-4" class="outline-3"&gt;
&lt;h3 id="sec-2-4"&gt;&lt;span class="section-number-3"&gt;2.4&lt;/span&gt; calc.xterm()&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-4"&gt;
&lt;p&gt;
This will pop up an xterm window in the directory of the calculation. There you can run commands and see what is going on.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; vasp &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; Vasp
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np

&lt;span style="color: #BA36A5;"&gt;calc&lt;/span&gt; = Vasp(&lt;span style="color: #008000;"&gt;'molecules/co-n00'&lt;/span&gt;)

calc.xterm()
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-5" class="outline-3"&gt;
&lt;h3 id="sec-2-5"&gt;&lt;span class="section-number-3"&gt;2.5&lt;/span&gt; calc.qoutout()&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-5"&gt;
&lt;p&gt;
Returns contents of the queue output file if it exists. May be useful to debug.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; vasp &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; Vasp
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np

&lt;span style="color: #BA36A5;"&gt;calc&lt;/span&gt; = Vasp(&lt;span style="color: #008000;"&gt;'molecules/co-n00'&lt;/span&gt;)

&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(calc.qoutput())
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
xmodmap:  unable to open display ''
 vasp.5.3.5 31Mar14 (build Aug 04 2015 12:48:45) complex

 POSCAR found :  2 types and       2 ions
 LDA part: xc-table for Pade appr. of Perdew
 POSCAR found :  2 types and       2 ions
 POSCAR, INCAR and KPOINTS ok, starting setup
 WARNING: small aliasing (wrap around) errors must be expected
 FFT: planning ...
 WAVECAR not read
 WARNING: random wavefunctions but no delay for mixing, default for NELMDL
 entering main loop
       N       E                     dE             d eps       ncg     rms          rms(c)
DAV:   1     0.693510492725E+02    0.69351E+02   -0.29305E+03    12   0.855E+02
DAV:   2    -0.556930203939E+01   -0.74920E+02   -0.74931E+02    18   0.248E+02
DAV:   3    -0.151153850754E+02   -0.95461E+01   -0.95461E+01    12   0.964E+01
DAV:   4    -0.153607093341E+02   -0.24532E+00   -0.24532E+00    12   0.138E+01
DAV:   5    -0.153763439194E+02   -0.15635E-01   -0.15635E-01    24   0.343E+00    0.816E+00
DAV:   6    -0.144168400550E+02    0.95950E+00   -0.26887E+00    12   0.196E+01    0.429E+00
DAV:   7    -0.142207761391E+02    0.19606E+00   -0.48211E-01    18   0.795E+00    0.186E+00
DAV:   8    -0.142021024270E+02    0.18674E-01   -0.81621E-02    18   0.376E+00    0.582E-01
DAV:   9    -0.142016090043E+02    0.49342E-03   -0.11924E-02    12   0.136E+00    0.870E-02
DAV:  10    -0.142024449557E+02   -0.83595E-03   -0.55763E-04    12   0.268E-01    0.420E-02
DAV:  11    -0.142040155105E+02   -0.15706E-02   -0.43005E-04    18   0.201E-01    0.267E-02
DAV:  12    -0.142041222436E+02   -0.10673E-03   -0.11191E-04     6   0.106E-01    0.989E-03
DAV:  13    -0.142042422801E+02   -0.12004E-03   -0.26082E-05     6   0.587E-02    0.352E-03
DAV:  14    -0.142042518369E+02   -0.95569E-05   -0.35661E-06     6   0.202E-02
   1 F= -.14204252E+02 E0= -.14208117E+02  d E =0.115958E-01
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-6" class="outline-3"&gt;
&lt;h3 id="sec-2-6"&gt;&lt;span class="section-number-3"&gt;2.6&lt;/span&gt; Vasp.torque()&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-6"&gt;
&lt;p&gt;
This command prints out an org-mode table with clickable links
&lt;/p&gt;
&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; vasp &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; Vasp
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np

&lt;span style="color: #BA36A5;"&gt;bond_lengths&lt;/span&gt; = np.linspace(1.05, 1.3, 10)
&lt;span style="color: #BA36A5;"&gt;calcs&lt;/span&gt; = [Vasp(&lt;span style="color: #008000;"&gt;'molecules/co-n{0:02d}'&lt;/span&gt;.&lt;span style="color: #006FE0;"&gt;format&lt;/span&gt;(i))
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; i, d &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;enumerate&lt;/span&gt;(bond_lengths)]

&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(Vasp.torque())
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="left"&gt;

&lt;col class="left"&gt;

&lt;col class="left"&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;&lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/xterm%20-e" cd ls&gt;molecules/co-n00&lt;/a&gt; &lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/(find-file"&gt;dired&lt;/a&gt;&lt;/td&gt;
&lt;td class="left"&gt;&lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/qstat%201397279.gilgamesh.cheme.cmu.edu"&gt;1397279.gilgamesh.cheme.cmu.edu&lt;/a&gt;&lt;/td&gt;
&lt;td class="left"&gt;&lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/qdel%201397279.gilgamesh.cheme.cmu.edu"&gt;qdel&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;&lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/xterm%20-e" cd ls&gt;molecules/co-n01&lt;/a&gt; &lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/(find-file"&gt;dired&lt;/a&gt;&lt;/td&gt;
&lt;td class="left"&gt;&lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/qstat%201397280.gilgamesh.cheme.cmu.edu"&gt;1397280.gilgamesh.cheme.cmu.edu&lt;/a&gt;&lt;/td&gt;
&lt;td class="left"&gt;&lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/qdel%201397280.gilgamesh.cheme.cmu.edu"&gt;qdel&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;&lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/xterm%20-e" cd ls&gt;molecules/co-n02&lt;/a&gt; &lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/(find-file"&gt;dired&lt;/a&gt;&lt;/td&gt;
&lt;td class="left"&gt;&lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/qstat%201397281.gilgamesh.cheme.cmu.edu"&gt;1397281.gilgamesh.cheme.cmu.edu&lt;/a&gt;&lt;/td&gt;
&lt;td class="left"&gt;&lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/qdel%201397281.gilgamesh.cheme.cmu.edu"&gt;qdel&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;&lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/xterm%20-e" cd ls&gt;molecules/co-n03&lt;/a&gt; &lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/(find-file"&gt;dired&lt;/a&gt;&lt;/td&gt;
&lt;td class="left"&gt;&lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/qstat%201397282.gilgamesh.cheme.cmu.edu"&gt;1397282.gilgamesh.cheme.cmu.edu&lt;/a&gt;&lt;/td&gt;
&lt;td class="left"&gt;&lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/qdel%201397282.gilgamesh.cheme.cmu.edu"&gt;qdel&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;&lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/xterm%20-e" cd ls&gt;molecules/co-n04&lt;/a&gt; &lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/(find-file"&gt;dired&lt;/a&gt;&lt;/td&gt;
&lt;td class="left"&gt;&lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/qstat%201397283.gilgamesh.cheme.cmu.edu"&gt;1397283.gilgamesh.cheme.cmu.edu&lt;/a&gt;&lt;/td&gt;
&lt;td class="left"&gt;&lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/qdel%201397283.gilgamesh.cheme.cmu.edu"&gt;qdel&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;&lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/xterm%20-e" cd ls&gt;molecules/co-n05&lt;/a&gt; &lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/(find-file"&gt;dired&lt;/a&gt;&lt;/td&gt;
&lt;td class="left"&gt;&lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/qstat%201397284.gilgamesh.cheme.cmu.edu"&gt;1397284.gilgamesh.cheme.cmu.edu&lt;/a&gt;&lt;/td&gt;
&lt;td class="left"&gt;&lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/qdel%201397284.gilgamesh.cheme.cmu.edu"&gt;qdel&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;&lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/xterm%20-e" cd ls&gt;molecules/co-n06&lt;/a&gt; &lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/(find-file"&gt;dired&lt;/a&gt;&lt;/td&gt;
&lt;td class="left"&gt;&lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/qstat%201397285.gilgamesh.cheme.cmu.edu"&gt;1397285.gilgamesh.cheme.cmu.edu&lt;/a&gt;&lt;/td&gt;
&lt;td class="left"&gt;&lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/qdel%201397285.gilgamesh.cheme.cmu.edu"&gt;qdel&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;&lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/xterm%20-e" cd ls&gt;molecules/co-n07&lt;/a&gt; &lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/(find-file"&gt;dired&lt;/a&gt;&lt;/td&gt;
&lt;td class="left"&gt;&lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/qstat%201397286.gilgamesh.cheme.cmu.edu"&gt;1397286.gilgamesh.cheme.cmu.edu&lt;/a&gt;&lt;/td&gt;
&lt;td class="left"&gt;&lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/qdel%201397286.gilgamesh.cheme.cmu.edu"&gt;qdel&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;&lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/xterm%20-e" cd ls&gt;molecules/co-n08&lt;/a&gt; &lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/(find-file"&gt;dired&lt;/a&gt;&lt;/td&gt;
&lt;td class="left"&gt;&lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/qstat%201397287.gilgamesh.cheme.cmu.edu"&gt;1397287.gilgamesh.cheme.cmu.edu&lt;/a&gt;&lt;/td&gt;
&lt;td class="left"&gt;&lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/qdel%201397287.gilgamesh.cheme.cmu.edu"&gt;qdel&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="left"&gt;&lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/xterm%20-e" cd ls&gt;molecules/co-n09&lt;/a&gt; &lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/(find-file"&gt;dired&lt;/a&gt;&lt;/td&gt;
&lt;td class="left"&gt;&lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/qstat%201397288.gilgamesh.cheme.cmu.edu"&gt;1397288.gilgamesh.cheme.cmu.edu&lt;/a&gt;&lt;/td&gt;
&lt;td class="left"&gt;&lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/qdel%201397288.gilgamesh.cheme.cmu.edu"&gt;qdel&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;a href="http://kitchingroup.cheme.cmu.edu/dft-book/media/managing-queued-jobs-with-vasp.py/managing-queued-jobs-with-vasp.py.org"&gt;org-source&lt;/a&gt;</description><guid>http://kitchingroup.cheme.cmu.edu/dft-book/posts/managing-queued-jobs-with-vasp.py/</guid><pubDate>Thu, 26 May 2016 19:29:29 GMT</pubDate></item></channel></rss>